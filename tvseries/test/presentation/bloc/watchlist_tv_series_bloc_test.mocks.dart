// Mocks generated by Mockito 5.0.16 from annotations
// in tvseries/test/presentation/bloc/watchlist_tv_series_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:core/common/commons.dart' as _i7;
import 'package:core/core.dart' as _i5;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/movies.dart' as _i2;
import 'package:tvseries/tvseries.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieRepository_0 extends _i1.Fake implements _i2.MovieRepository {}

class _FakeTVSeriesRepository_1 extends _i1.Fake
    implements _i3.TVSeriesRepository {}

class _FakeEither_2<L, R> extends _i1.Fake implements _i4.Either<L, R> {}

/// A class which mocks [GetWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatus extends _i1.Mock
    implements _i5.GetWatchListStatus {
  MockGetWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movieRepository =>
      (super.noSuchMethod(Invocation.getter(#movieRepository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i3.TVSeriesRepository get tvSeriesRepository =>
      (super.noSuchMethod(Invocation.getter(#tvSeriesRepository),
          returnValue: _FakeTVSeriesRepository_1()) as _i3.TVSeriesRepository);
  @override
  _i6.Future<bool> executeMovies(int? id) =>
      (super.noSuchMethod(Invocation.method(#executeMovies, [id]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> executeTVSeries(int? id) =>
      (super.noSuchMethod(Invocation.method(#executeTVSeries, [id]),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SaveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlist extends _i1.Mock implements _i5.SaveWatchlist {
  MockSaveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movieRepository =>
      (super.noSuchMethod(Invocation.getter(#movieRepository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i3.TVSeriesRepository get tvSeriesRepository =>
      (super.noSuchMethod(Invocation.getter(#tvSeriesRepository),
          returnValue: _FakeTVSeriesRepository_1()) as _i3.TVSeriesRepository);
  @override
  _i6.Future<_i4.Either<_i7.Failure, String>> executeMovies(
          _i2.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#executeMovies, [movie]),
              returnValue: Future<_i4.Either<_i7.Failure, String>>.value(
                  _FakeEither_2<_i7.Failure, String>()))
          as _i6.Future<_i4.Either<_i7.Failure, String>>);
  @override
  _i6.Future<_i4.Either<_i7.Failure, String>> executeTVSeries(
          _i3.TVSeriesDetail? tvSeries) =>
      (super.noSuchMethod(Invocation.method(#executeTVSeries, [tvSeries]),
              returnValue: Future<_i4.Either<_i7.Failure, String>>.value(
                  _FakeEither_2<_i7.Failure, String>()))
          as _i6.Future<_i4.Either<_i7.Failure, String>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RemoveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlist extends _i1.Mock implements _i5.RemoveWatchlist {
  MockRemoveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movieRepository =>
      (super.noSuchMethod(Invocation.getter(#movieRepository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i3.TVSeriesRepository get tvSeriesRepository =>
      (super.noSuchMethod(Invocation.getter(#tvSeriesRepository),
          returnValue: _FakeTVSeriesRepository_1()) as _i3.TVSeriesRepository);
  @override
  _i6.Future<_i4.Either<_i7.Failure, String>> executeMovies(
          _i2.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#executeMovies, [movie]),
              returnValue: Future<_i4.Either<_i7.Failure, String>>.value(
                  _FakeEither_2<_i7.Failure, String>()))
          as _i6.Future<_i4.Either<_i7.Failure, String>>);
  @override
  _i6.Future<_i4.Either<_i7.Failure, String>> executeTVSeries(
          _i3.TVSeriesDetail? tvSeries) =>
      (super.noSuchMethod(Invocation.method(#executeTVSeries, [tvSeries]),
              returnValue: Future<_i4.Either<_i7.Failure, String>>.value(
                  _FakeEither_2<_i7.Failure, String>()))
          as _i6.Future<_i4.Either<_i7.Failure, String>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetWatchlistTVSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistTVSeries extends _i1.Mock
    implements _i3.GetWatchlistTVSeries {
  MockGetWatchlistTVSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i3.TVSeries>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  Future<_i4.Either<_i7.Failure, List<_i3.TVSeries>>>.value(
                      _FakeEither_2<_i7.Failure, List<_i3.TVSeries>>()))
          as _i6.Future<_i4.Either<_i7.Failure, List<_i3.TVSeries>>>);
  @override
  String toString() => super.toString();
}
